01_next.pdf----------------------------------------------------------------------------

* 특징: scanf()

* 예제: 숫자를 입력받고 그대로 출력하는 코드

* 과제(bits.c): 숫자를 입력받고 1을 더해 출력, 숫자가 아니라면 NaN 출력

02_bits.pdf----------------------------------------------------------------------------

* 특징: getchar() - 입력 받은 문자를 반환하는 함수; 전달인자 필요 X
        putchar(인자); 전달인자 필요
        * 문자 - '0': 해당 문자에 해당하는 아스키 값 - 48 -> 아스키 문자에서 숫자 추출 용도
                      숫자로 표현된 문자를 정수 변환 시 유용
        * '0'을 아스키코드로 나타내면 48 -> 값의 차이를 이용하여 숫자를 알아내고자 '0'을 뺌
        * 문자 '0' ~ '9' 이후에 'A'가 어떤 숫자에 위치하는 지를 추출함

* 예제(exbits.c): 문자열을 입력받아, 아스키 코드, , 1과의 & 연산 값 출력

✨비트 연산 아주 중요✨
* 과제(bits.c): 입력받은 숫자의 이진표현에서 1, 3, 5, 7번째 이진수만 추출하여 만든
                * 이진표현이 나타내는 숫자를 출력
                * (숫자의 문자표현이 나타내는 아스키값 - '0')을 하면 숫자로 표현 가능
                * int로 정의해둔 number를 숫자들로 다시 재구성 해줌
                * 이진표현의 0, 1이 위치해있는 자리가 중요하므로
                  각 자리의 1을 가지고 있는 1, 2, 4, 8과의 & 연산을 통한 비교 진행.
                  이때, 2, 4, 6자리는 필요없으므로 bit shift를 진행함.

03_fbits.pdf----------------------------------------------------------------------------

* 특징: 다시하기다시하기다시하기

* 예제(exfbits.c):

* 과제(fbits.c):

04_wdmix.pdf----------------------------------------------------------------------------

* 특징: string 헤더파일 - #include<string.h>
        * strlen(): 문자열의 길이를 구해주는 함수
        * strtok(): 문자열을 분리해주는 함수
          * 형태: strtok(대상문자열, 분리기준기호)
        * do while문 -> 처음 한 번은 무조건 실행하고 싶을 때 사용하기 좋은 함수
        * puts(): 문자열만을 출력하는 함수 -> '\n' 출력 시 printf()보다 속도 빠름

* 예제(exwdmix.c): 문자열을 공백을 기준으로 분리하여 개별 단어들을 출력함

* 과제(wdmix.c): 특정 단어 길이 제한 하에서,
                 두 단어를 입력받고 해당 단어를 구성하는 알파벳들을  교차하여 출력

05_wdiff.pdf----------------------------------------------------------------------------

* 특징: math 헤더파일 - #include<math.h>
        * math 헤더파일을 가진 코드를 컴파일 하려면 컴파일 시 <-lm> 옵션이 필요하다!!

* 예제(exwdist.c): 문자의 개수와 그 외 것들의 개수를 가지고 길이를 구하는 코드

* 과제(wdist.c): 입력받은 문자열의 자음, 모음 각각의 개수로 길이를 구하는 코드

h01_norp.pdf----------------------------------------------------------------------------

* 특징: %+의 사용

* 예제(exnorp.c): 주어진 숫자 앞에 + 기호를 붙여 출력 %+ 이용!
                  * 다만 음수에는 적용이 안됨 (양수, 0에만 적용)

* 과제(norp.c): 입력된 숫자가 양수라면 +1을 하고 + 기호를 붙여 출력,
                              음수라면 -1을 하고 - 기호를 붙여 출력,
                              0이라면 + 기호를 붙여 +0 출력

h02_case.pdf----------------------------------------------------------------------------

* 특징: 연산자를 통한 문자 비교

* 예제(excases.c): 연산자를 통해 문자에 해당하는 숫자값을 비교

* 과제(cases.c): 아스키값의 연산을 통해 입력값으로 받은 문자 뒤에 오는 문자를 출력

h03_m2p.pdf----------------------------------------------------------------------------

* 특징: fscanf(), fprintf()
        * fscanf(): 스트림에서 형식 문자열에서 지정한 방식대로 데이터를 읽어온 후,
                    형식 지정자에 대응하는 인자가 가리키는 메모리 공간에 데이터를 집어넣음
          * 형태: fscanf(stdin, "%d%d", &pizza, &person)
        * fprintf(): 스트림에 특정한 형식으로 데이터를 씀

* 예제(exm2p.c): 입력된 값으로 인당 돌아가는 피자의 양을 출력

✨이거 한다고 고생했음✨
* 과제(m2p.c): 기준 평수와 넓이 표본들을 비교하여 기준 평수보다 작되 표본들 중 가장 큰 수치의
               평수와 m^2 넓이를 출력

h04_wdweight.pdf----------------------------------------------------------------------------

* 특징: MAX_LEN, fgets(), puts()
  * MAX_LEN: 상수로 최대 길이를 선언 후 문자열 길이 제한에 사용
  * 

* 예제(ddd.c):

* 과제(ddd.c):

h05_heron.pdf----------------------------------------------------------------------------

* 특징:

* 예제(ddd.c):

* 과제(ddd.c):
